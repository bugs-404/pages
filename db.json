{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1554344343169},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1554344343169},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1554344343170},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1554344343170},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1554344343170},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1554344343178},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1554344343169},{"_id":"source/_posts/2019-04-01-让Docker和Consul和谐相处.md","hash":"7fd24cf6412a4a0400dc213a8be01079bb99a64f","modified":1554344382468},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1554344343170},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1554344343170},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1554344343171},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1554344343171},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1554344343171},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1554344343171},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1554344343171},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1554344343171},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1554344343171},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1554344343172},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1554344343172},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1554344343172},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554344343176},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554344343176},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1554344343177},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1554344343177},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554344343177},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554344343177},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1554344343178},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554344343177},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1554344343172},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1554344343172},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1554344343173},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1554344343174},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1554344343175},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1554344343175},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1554344343175},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1554344343176},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1554344343176},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1554344343176},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1554344343179},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1554344343181},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1554344343189},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554344343189},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554344343190},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554344343190},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554344343190},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554344343190},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554344343191},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1554344343193},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1554344343193},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1554344343194},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1554344343194},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1554344343174},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1554344343174},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1554344343174},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1554344343174},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1554344343175},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1554344343175},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1554344343179},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1554344343179},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1554344343179},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1554344343179},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1554344343180},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1554344343180},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1554344343180},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1554344343180},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1554344343180},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1554344343181},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1554344343181},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1554344343181},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1554344343183},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1554344343183},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1554344343186},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554344343191},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554344343191},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1554344343192},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1554344343192},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554344343192},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1554344343192},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1554344343186},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1554344343185},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1554344343189}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-04T02:19:03.169Z","updated":"2019-04-04T02:19:03.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju20lvo20000fazlw70ww8m8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"使用Docker和Consul(译)","date":"2019-04-01T06:34:52.000Z","_content":"[原文链接](https://medium.com/zendesk-engineering/making-docker-and-consul-get-along-5fceda1d52b9) 可能需要科学上网\n\n&emsp;&emsp;如果你正在管理一个一定规模的互联网技术栈，你很可能听说过[Consul](https://www.consul.io/)。Consul是一个非常棒的解决方案，它能给你的网络提供强大、可靠的服务发现能力。你想要使用它一点也不会让人感到意外。\n\n&emsp;&emsp;让我们假设你已经决定在你的生产环境中使用[Docker](https://www.docker.com/)容器。让我们再假设你打算把容器中的服务发布到Consul的服务注册中心。怎样可靠、轻松的实现这一需求呢？\n\n## 总结\n\n- 直接在你的宿主机上安装Consul和[dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html)，或者把它们安装在使用主机网络(--net=host)的容器里。\n- 在宿主机上创建一个[虚拟网络接口(dummy network interface)](http://www.tldp.org/LDP/nag/node72.html)，并给它分配一个本地IP(例如：169.254.1.1)。\n- 配置Consul，绑定它的HTTP和客户端RPC服务到上述虚拟网络接口的IP地址上。\n- 配置dnsmasq监听虚拟IP地址。\n- 配置你的容器，使用虚拟IP地址作为它们的DNS服务器和Consul服务器。\n- 使用程序如：[Registrator](https://github.com/gliderlabs/registrator)发布你的容器服务。\n<!--more-->\n\n## Consul和容器化应用\n\n&emsp;&emsp;假设你已经决定在你的Docker主机上使用Consul，并且你有以下需求。\n\n- 容器化应用必须能够准确的确定其他应用的地址和端口--不论其他应用是否在同一台主机或者不同的主机。\n- 容器化应用必须能够读写Consul的key-value数据库，并且可靠的执行锁操作\n- 外部主机上的应用必须能够连接这个容器化应用。\n- 健康检查失败的应用必须能够准确的被报告到Consul服务注册中心。\n- 如果一个Docker主机变为不可达，其上的所有应用会被标记为down，并且/或者在Consul服务注册中心取消发布。\n\n## 在你的Docker主机上安装Consul\n\n&emsp;&emsp;在你的网络中的所有主机包括Docker主机上安装、运行Consul Agent 被被认为是一个最佳实践。这有一些很重要的好处：\n&emsp;&emsp;首先，这使得配置服务变得非常简单。运行于宿主机之上的服务(即非容器化的)可以简单的将包含健康检查的服务定义放置到/etc/consul.d/<service_name>.json，Consul Agent 会在启动时或者信号通知时加载它们。然后Consul Agent会将这些服务发不到注册中心并按照你指定的频率执行你设计的健康检查。\n\n&emsp;&emsp;其次，这能够提供可靠的失败监测。如果你的主机因为关机会其他任何原因变得不可达，运行于其他主机上的Consul Agent网络马上会注意到;并且任何注册在这台主机上的服务都会自动被标记为不可用。\n\n&emsp;&emsp;最后，它提供了一个本地节点来接收Consul DNS查询和HTTP API 请求。这些请求可以不必经过网络，这可以简化网络安全策略和减少网络通讯。\n\n&emsp;&emsp;最具争议的问题是：你应该在宿主机还是一个容器里安装Consul Agent?\n\n&emsp;&emsp;答案是：这无所谓-但有所谓的是`网络配置`。Consul本身是一个很小的、自包含的Linux二进制文件；它没有运行时依赖。如果你愿意你当然可以在容器环境中运行它，但是运行环境隔离带来的吸引力由于Consul根本不需要隔离而变得很小。我个人喜欢在宿主机上与其他系统基础服务Docker engine和sshd等服务一样以一等服务来运行Consul。\n\n&emsp;&emsp;当然你也可以选择在容器中运行Consul。Hashicorp 在Docker Hub发布了[官方镜像](https://hub.docker.com/_/consul/)。重要的部分是当你运行容器时，你必须使用 --net=host 选项。\n\n    $ sudo docker run -d --net=host consul:latest\n\n## Consul和回环接口\n\n&emsp;&emsp;当你运行Consul agent时，它监听6个端口来提供不同的功能。以下三个端口是我们重点讨论的：\n\n- HTTP API (默认：8500)：处理来自客户端的HTTP API 请求\n- CLI RPC（默认：8400）：处理来自命令行的请求\n- DNS（默认：8600）：回答DNS查询\n\n&emsp;&emsp;默认情况下，Consul只允许来自回环接口（127.0.0.1）的连接。出于安全考虑，这是一个合理的默认选项，而且在非容器环境下没什么问题。但是对于容器应用来说存在一个难题：容器里边的回环接口和宿主机回环接口是分开的。这是由于在Docker里每个容器都在私有的网络命名空间中运行。所以当一个容器化应用尝试通过地址http://127.0.0.1:8500连接Consul时，它一定会失败。\n\n## 我们考虑过但拒绝的想法\n\n- 配置Consul使之绑定所有接口。这将会使HTTP和CLI RPC 端口项外网开放除非我们配置iptables规则来阻止外部主机的访问。而且我们必须确保服务容器知道它们的宿主机IP地址以便和它的Consul agent通讯。\n- 配置Consul使之绑定Docker网桥IP地址。这个选择能够正常工作但是：(a) 一般网桥接口是Docker动态分配的；(b) 可能存在多个网桥接口；(c) 容器必须清除选择的网桥接口；(d) Consul agent和dnsmasq(下面将描述)在Docker engin启动之前将不会启动。我们不想创建任何不必要的依赖\n- 给每一个容器安装一个Consul agent。Consul的架构体系期待每个主机IP地址一个agent; 并且在大多数环境里，一个Docker主机有一个可访问IP地址。每个容器运行一个Consul agent会造成过个agent加入Consul网络并且声明负责这台主机，引起集群不稳定。\n- 和应用容器分享Consul agent容器的网络。一个容器有且仅有一个网络命名空间。所以如果你的应用程序和Consul agent容器分享网络命名空间，它们之间也将分享网络命名空间。这将剥夺我们使用容器带来的主要好处-网络隔离。\n\n## 虚拟(dummy)接口解决方案\n\n&emsp;&emsp;Linux提供了一个叫做“虚拟接口（dummy interface）”的鲜为人知的网络接口类型。它很像一个回环接口，但是你可以给他分配任何IP，并且你可以创建任意多的虚拟接口（我们只需要一个）。以下是一个例子：\n\n    $ sudo ip link add dummy0 type dummy\n    $ sudo ip link set dev dummy0 up\n    $ ip link show type dummy\n    25: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n        link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n\n&emsp;&emsp;我们该为接口分配什么IP?169.254.1.1是一个不错的选择。169.254.0.0/16网段内的地址是本地连接保留地址，这意味着无论在你的本地网络或者互联网上它们都是不可路由的，并且它们对于分配者来说完全是私有的。（一个例外：亚马逊 EC2使用了一个169.254.169.254地址来获取示例元数据，但是我们的操作不会影响这一功能）\n\n    $ sudo ip addr add 169.254.1.1/32 dev dummy0 \n    $ sudo ip link set dev dummy0 up\n    $ ip addr show dev dummy0\n    25: dummy0: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN qlen 1000\n        link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n        inet 169.254.1.1/32 scope global dummy0\n        valid_lft forever preferred_lft forever\n        inet6 fe80::28bb:3eff:fef6:501c/64 scope link \n        valid_lft forever preferred_lft forever\n    \n&emsp;&emsp;每个主机可以使用相同的虚拟接口地址169.254.1.1。这样会大大简化配置，因为你不必为应用程序写脚本来为它确定、提供它需要得IP地址。\n\n## 配置接口\n\n&emsp;&emsp;如果你的linux发行版使用systemd,可以很方便的通过创建两个文件来达到启动时配置虚拟接口。（你可能需要通过你的发行版包管理器来安装systemd-networkd，启用并启动它）\n\n&emsp;&emsp;把下面的内容写到文件`/etc/systemd/network/dummy0.netdev`里:\n\n    [NetDev]\n    Name=dummy0\n    Kind=dummy\n\n&emsp;&emsp;然后把下面的内容写到文件`/etc/systemd/network/dummy0.network`里\n    \n    [Match]\n    Name=dummy0\n\n    [Network]\n    Address=169.254.1.1/32\n\n&emsp;&emsp;运行命令`sudo systemctl restart systemd-networkd`后，dummy0接口应该生成了。\n\n&emsp;&emsp;如果你没有使用`systemd`，查看你的linux发行版文档来学习如何在你的主机创建一个虚拟接口。\n\n## 配置Consul来使用上面的虚拟接口\n\n&emsp;&emsp;接下来让我们配置Consul agent，使它绑定它的HTTP、CLI RPC，和DNS接口到地址169.254.1.1.\n\n&emsp;&emsp;假设angent使用`-config-dir=/etc/consul.d`选项启动。我们可以简单的创建一个文件`/etc/consul.d/interfaces.json`，内容如下，用你的主机IP地址替换`HOST_IP_ADDRESS`变量。\n\n```\n{\n  \"client_addr\": \"169.254.1.1\",\n  \"bind_addr\": \"HOST_IP_ADDRESS\"\n}\n```\n\n&emsp;&emsp;做完之后你需要重启Consul agent。\n\n## 配置dnsmasq使用虚拟接口\n\n&emsp;&emsp;dnsmasq是一个非常棒的软件。它可以在你的主机上扮演本地DNS缓存。它极其的可靠并且可以很容易和Consul的DNS服务集成。我们将在我们的服务器上安装它；绑定它到我们的回环接口和虚拟接口；使他传递请求到Consul agent的 `.consul`；在主机和容器上配置`/etc/resolv.conf`来分发DNS请求到它。\n\n&emsp;&emsp;首先，使用你的系统包管理工具（`yum`， `apt-get`等）来安装dnsmasq\n\n&emsp;&emsp;接下来，配置dnsmasq绑定到回环接口和虚拟接口，并且向前传递Consul查询到agent.创建一个文件 `/etc/dnsmasq.d/consul.conf`，内容如下\n\n```\nserver=/consul/169.254.1.1#8600\nlisten-address=127.0.0.1\nlisten-address=169.254.1.1\n```\n然后重启dnsmasq.\n\n## 组合起来：容器、Consul、DNS\n\n&emsp;&emsp;现在让一切正常运行的关键是确保这些容器和容器内运行的的代码在解析DNS查询的时候指向正确的地址或连接到Consul的HTTP API\n\n&emsp;&emsp;当启动你的Docker容器时，配置它以dnsmasq作为他的解析器\n\n    docker run --dns 169.254.1.1\n\n&emsp;&emsp;由于dnsmasq将传递dns查询到Consul agent，所以容器化应用将能够查询 `.consul`结尾的地址\n\n&emsp;&emsp;Consul API 访问呢？关键是设置两个标准的环境变量： CONSUL_HTTP_ADDR 和 CONSUL_RPC_ADDR。几乎所有标准COnsul客户端库都是用这些值来决定向哪里发送查询。请确认你的代码也使用这些变量--永远不要在你的程序中硬编码Consul地址！\n\n```\nsudo docker run --dns 169.254.1.1 \\\n            -e CONSUL_HTTP_ADDR=169.254.1.1:8500 \\\n            -e CONSUL_RPC_ADDR=169.254.1.1:8400 ...\n```\n\n现在让我们实践一下！\n\n&emsp;&emsp;假设我们有一个叫做`myapp`的已经注册到Consul的服务。我们能够在容器中找到他吗？当然：\n\n```\n$ sudo docker run --dns 169.254.1.1 \\\n                -e CONSUL_HTTP_ADDR=169.254.1.1 \\\n                -e CONSUL_RPC_ADDR=169.254.1.1 \\\n                -it \\\n                myImage:latest /bin/sh\n\n # curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/myapp?pretty\n[\n   {\n      \"ID\": \"6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3\",\n      \"Node\": \"vessel\",\n      \"Address\": \"10.0.0.2\",\n      \"ServiceID\": \"myapp\",\n      \"ServiceName\": \"myapp\",\n      \"ServiceTags\": [],\n      \"ServiceAddress\": \"\",\n      \"ServicePort\": 80,\n      \"ServiceEnableTagOverride\": false,\n      \"CreateIndex\": 60,\n      \"ModifyIndex\": 60\n    }\n]\n# dig +short myapp.service.consul\n10.0.0.2               \n```\n\n&emsp;&emsp;将CONSUL_HTTP_ADDR 和CONSUL_RPC_ADDR设为所有用户shell的默认环境变量是个好主意。你可以简单地通过编辑主机上的 `/etc/environment` 文件，内容如下：\n\n```\n# /etc/environment\nCONSUL_HTTP_ADDR=169.254.1.1:8500\nCONSUL_RPC_ADDR=169.254.1.1:8400\n```\n\n## 注册容器\n\n&emsp;&emsp;现在我们已经演示了容器能够访问Consul agent，你可能想要发布他们的服务到Consul注册中心。\n\n&emsp;&emsp;有很多工具可以实现这个需求。我最喜欢的开源工具是[Registrator](https://github.com/gliderlabs/registrator)，可以在[Docker hub](https://hub.docker.com/r/gliderlabs/registrator/)获取。\n\n&emsp;&emsp;让我们安装Registrator并且使用它发布一个容器。首先：\n\n```\nsudo docker run -d --name=registrator --net=host \\\n            --volume=/var/run/docker.sock:/tmp/docker.sock \\\n            gliderlabes/registrator:latest consul://$CONSUL_HTTP_ADDR\n```\n\n&emsp;&emsp;现在，让我们启动一个简单的运行Nginx的容器:\n\n```\nsudo docker run -d --name=webservice -e CONSUL_HTTP_ADDR=$CONSUL_HTTP_ADDR \\\n                                     -e SERVICE_NAME=webservice \\\n                                     --dns 169.254.1.1 -P nginx:laterst\n```\n\n&emsp;&emsp;Registrator将会检测到服务并发布到Consul。（由于 `nginx` 镜像暴露两个端口，Registrator在注册服务到注册中心时将追加 `-80`和`-443`到服务名 `webservice`，你可以改变这一行为，如果你愿意设置[其他环境变量](http://gliderlabs.com/registrator/latest/user/services/)）\n\n```\n$ sudo docker logs registrator\n2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:443\n2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:80\n\n$ curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/webservice-80?pretty\n[\n    {\n        \"ID\": \"6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3\",\n        \"Node\": \"vessel\",\n        \"Address\": \"10.0.0.2\",\n        \"ServiceID\": \"vessel:webservice:80\",\n        \"ServiceName\": \"webservice-80\",\n        \"ServiceTags\": [],\n        \"ServiceAddress\": \"\",\n        \"ServicePort\": 32772,\n        \"ServiceEnableTagOverride\": false,\n        \"CreateIndex\": 496,\n        \"ModifyIndex\": 496\n    }\n]\n```\n\n&emsp;&emsp;当容器停止时，Registrator会自动从Consul注册中心移除它。\n\n## 结论\n\n&emsp;&emsp;使用虚拟借口，我们可以避免复杂的配置和困难让Docker主机建立Consul agent。\n\n&emsp;&emsp;使用Registrator，我们可以简单的发布Docker容器到Consul。","source":"_posts/2019-04-01-让Docker和Consul和谐相处.md","raw":"---\ntitle: 使用Docker和Consul(译)\ndate: 2019-04-01 14:34:52\ntags: \n- Docker\n- Consul\n- 翻译\n---\n[原文链接](https://medium.com/zendesk-engineering/making-docker-and-consul-get-along-5fceda1d52b9) 可能需要科学上网\n\n&emsp;&emsp;如果你正在管理一个一定规模的互联网技术栈，你很可能听说过[Consul](https://www.consul.io/)。Consul是一个非常棒的解决方案，它能给你的网络提供强大、可靠的服务发现能力。你想要使用它一点也不会让人感到意外。\n\n&emsp;&emsp;让我们假设你已经决定在你的生产环境中使用[Docker](https://www.docker.com/)容器。让我们再假设你打算把容器中的服务发布到Consul的服务注册中心。怎样可靠、轻松的实现这一需求呢？\n\n## 总结\n\n- 直接在你的宿主机上安装Consul和[dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html)，或者把它们安装在使用主机网络(--net=host)的容器里。\n- 在宿主机上创建一个[虚拟网络接口(dummy network interface)](http://www.tldp.org/LDP/nag/node72.html)，并给它分配一个本地IP(例如：169.254.1.1)。\n- 配置Consul，绑定它的HTTP和客户端RPC服务到上述虚拟网络接口的IP地址上。\n- 配置dnsmasq监听虚拟IP地址。\n- 配置你的容器，使用虚拟IP地址作为它们的DNS服务器和Consul服务器。\n- 使用程序如：[Registrator](https://github.com/gliderlabs/registrator)发布你的容器服务。\n<!--more-->\n\n## Consul和容器化应用\n\n&emsp;&emsp;假设你已经决定在你的Docker主机上使用Consul，并且你有以下需求。\n\n- 容器化应用必须能够准确的确定其他应用的地址和端口--不论其他应用是否在同一台主机或者不同的主机。\n- 容器化应用必须能够读写Consul的key-value数据库，并且可靠的执行锁操作\n- 外部主机上的应用必须能够连接这个容器化应用。\n- 健康检查失败的应用必须能够准确的被报告到Consul服务注册中心。\n- 如果一个Docker主机变为不可达，其上的所有应用会被标记为down，并且/或者在Consul服务注册中心取消发布。\n\n## 在你的Docker主机上安装Consul\n\n&emsp;&emsp;在你的网络中的所有主机包括Docker主机上安装、运行Consul Agent 被被认为是一个最佳实践。这有一些很重要的好处：\n&emsp;&emsp;首先，这使得配置服务变得非常简单。运行于宿主机之上的服务(即非容器化的)可以简单的将包含健康检查的服务定义放置到/etc/consul.d/<service_name>.json，Consul Agent 会在启动时或者信号通知时加载它们。然后Consul Agent会将这些服务发不到注册中心并按照你指定的频率执行你设计的健康检查。\n\n&emsp;&emsp;其次，这能够提供可靠的失败监测。如果你的主机因为关机会其他任何原因变得不可达，运行于其他主机上的Consul Agent网络马上会注意到;并且任何注册在这台主机上的服务都会自动被标记为不可用。\n\n&emsp;&emsp;最后，它提供了一个本地节点来接收Consul DNS查询和HTTP API 请求。这些请求可以不必经过网络，这可以简化网络安全策略和减少网络通讯。\n\n&emsp;&emsp;最具争议的问题是：你应该在宿主机还是一个容器里安装Consul Agent?\n\n&emsp;&emsp;答案是：这无所谓-但有所谓的是`网络配置`。Consul本身是一个很小的、自包含的Linux二进制文件；它没有运行时依赖。如果你愿意你当然可以在容器环境中运行它，但是运行环境隔离带来的吸引力由于Consul根本不需要隔离而变得很小。我个人喜欢在宿主机上与其他系统基础服务Docker engine和sshd等服务一样以一等服务来运行Consul。\n\n&emsp;&emsp;当然你也可以选择在容器中运行Consul。Hashicorp 在Docker Hub发布了[官方镜像](https://hub.docker.com/_/consul/)。重要的部分是当你运行容器时，你必须使用 --net=host 选项。\n\n    $ sudo docker run -d --net=host consul:latest\n\n## Consul和回环接口\n\n&emsp;&emsp;当你运行Consul agent时，它监听6个端口来提供不同的功能。以下三个端口是我们重点讨论的：\n\n- HTTP API (默认：8500)：处理来自客户端的HTTP API 请求\n- CLI RPC（默认：8400）：处理来自命令行的请求\n- DNS（默认：8600）：回答DNS查询\n\n&emsp;&emsp;默认情况下，Consul只允许来自回环接口（127.0.0.1）的连接。出于安全考虑，这是一个合理的默认选项，而且在非容器环境下没什么问题。但是对于容器应用来说存在一个难题：容器里边的回环接口和宿主机回环接口是分开的。这是由于在Docker里每个容器都在私有的网络命名空间中运行。所以当一个容器化应用尝试通过地址http://127.0.0.1:8500连接Consul时，它一定会失败。\n\n## 我们考虑过但拒绝的想法\n\n- 配置Consul使之绑定所有接口。这将会使HTTP和CLI RPC 端口项外网开放除非我们配置iptables规则来阻止外部主机的访问。而且我们必须确保服务容器知道它们的宿主机IP地址以便和它的Consul agent通讯。\n- 配置Consul使之绑定Docker网桥IP地址。这个选择能够正常工作但是：(a) 一般网桥接口是Docker动态分配的；(b) 可能存在多个网桥接口；(c) 容器必须清除选择的网桥接口；(d) Consul agent和dnsmasq(下面将描述)在Docker engin启动之前将不会启动。我们不想创建任何不必要的依赖\n- 给每一个容器安装一个Consul agent。Consul的架构体系期待每个主机IP地址一个agent; 并且在大多数环境里，一个Docker主机有一个可访问IP地址。每个容器运行一个Consul agent会造成过个agent加入Consul网络并且声明负责这台主机，引起集群不稳定。\n- 和应用容器分享Consul agent容器的网络。一个容器有且仅有一个网络命名空间。所以如果你的应用程序和Consul agent容器分享网络命名空间，它们之间也将分享网络命名空间。这将剥夺我们使用容器带来的主要好处-网络隔离。\n\n## 虚拟(dummy)接口解决方案\n\n&emsp;&emsp;Linux提供了一个叫做“虚拟接口（dummy interface）”的鲜为人知的网络接口类型。它很像一个回环接口，但是你可以给他分配任何IP，并且你可以创建任意多的虚拟接口（我们只需要一个）。以下是一个例子：\n\n    $ sudo ip link add dummy0 type dummy\n    $ sudo ip link set dev dummy0 up\n    $ ip link show type dummy\n    25: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n        link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n\n&emsp;&emsp;我们该为接口分配什么IP?169.254.1.1是一个不错的选择。169.254.0.0/16网段内的地址是本地连接保留地址，这意味着无论在你的本地网络或者互联网上它们都是不可路由的，并且它们对于分配者来说完全是私有的。（一个例外：亚马逊 EC2使用了一个169.254.169.254地址来获取示例元数据，但是我们的操作不会影响这一功能）\n\n    $ sudo ip addr add 169.254.1.1/32 dev dummy0 \n    $ sudo ip link set dev dummy0 up\n    $ ip addr show dev dummy0\n    25: dummy0: <BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN qlen 1000\n        link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n        inet 169.254.1.1/32 scope global dummy0\n        valid_lft forever preferred_lft forever\n        inet6 fe80::28bb:3eff:fef6:501c/64 scope link \n        valid_lft forever preferred_lft forever\n    \n&emsp;&emsp;每个主机可以使用相同的虚拟接口地址169.254.1.1。这样会大大简化配置，因为你不必为应用程序写脚本来为它确定、提供它需要得IP地址。\n\n## 配置接口\n\n&emsp;&emsp;如果你的linux发行版使用systemd,可以很方便的通过创建两个文件来达到启动时配置虚拟接口。（你可能需要通过你的发行版包管理器来安装systemd-networkd，启用并启动它）\n\n&emsp;&emsp;把下面的内容写到文件`/etc/systemd/network/dummy0.netdev`里:\n\n    [NetDev]\n    Name=dummy0\n    Kind=dummy\n\n&emsp;&emsp;然后把下面的内容写到文件`/etc/systemd/network/dummy0.network`里\n    \n    [Match]\n    Name=dummy0\n\n    [Network]\n    Address=169.254.1.1/32\n\n&emsp;&emsp;运行命令`sudo systemctl restart systemd-networkd`后，dummy0接口应该生成了。\n\n&emsp;&emsp;如果你没有使用`systemd`，查看你的linux发行版文档来学习如何在你的主机创建一个虚拟接口。\n\n## 配置Consul来使用上面的虚拟接口\n\n&emsp;&emsp;接下来让我们配置Consul agent，使它绑定它的HTTP、CLI RPC，和DNS接口到地址169.254.1.1.\n\n&emsp;&emsp;假设angent使用`-config-dir=/etc/consul.d`选项启动。我们可以简单的创建一个文件`/etc/consul.d/interfaces.json`，内容如下，用你的主机IP地址替换`HOST_IP_ADDRESS`变量。\n\n```\n{\n  \"client_addr\": \"169.254.1.1\",\n  \"bind_addr\": \"HOST_IP_ADDRESS\"\n}\n```\n\n&emsp;&emsp;做完之后你需要重启Consul agent。\n\n## 配置dnsmasq使用虚拟接口\n\n&emsp;&emsp;dnsmasq是一个非常棒的软件。它可以在你的主机上扮演本地DNS缓存。它极其的可靠并且可以很容易和Consul的DNS服务集成。我们将在我们的服务器上安装它；绑定它到我们的回环接口和虚拟接口；使他传递请求到Consul agent的 `.consul`；在主机和容器上配置`/etc/resolv.conf`来分发DNS请求到它。\n\n&emsp;&emsp;首先，使用你的系统包管理工具（`yum`， `apt-get`等）来安装dnsmasq\n\n&emsp;&emsp;接下来，配置dnsmasq绑定到回环接口和虚拟接口，并且向前传递Consul查询到agent.创建一个文件 `/etc/dnsmasq.d/consul.conf`，内容如下\n\n```\nserver=/consul/169.254.1.1#8600\nlisten-address=127.0.0.1\nlisten-address=169.254.1.1\n```\n然后重启dnsmasq.\n\n## 组合起来：容器、Consul、DNS\n\n&emsp;&emsp;现在让一切正常运行的关键是确保这些容器和容器内运行的的代码在解析DNS查询的时候指向正确的地址或连接到Consul的HTTP API\n\n&emsp;&emsp;当启动你的Docker容器时，配置它以dnsmasq作为他的解析器\n\n    docker run --dns 169.254.1.1\n\n&emsp;&emsp;由于dnsmasq将传递dns查询到Consul agent，所以容器化应用将能够查询 `.consul`结尾的地址\n\n&emsp;&emsp;Consul API 访问呢？关键是设置两个标准的环境变量： CONSUL_HTTP_ADDR 和 CONSUL_RPC_ADDR。几乎所有标准COnsul客户端库都是用这些值来决定向哪里发送查询。请确认你的代码也使用这些变量--永远不要在你的程序中硬编码Consul地址！\n\n```\nsudo docker run --dns 169.254.1.1 \\\n            -e CONSUL_HTTP_ADDR=169.254.1.1:8500 \\\n            -e CONSUL_RPC_ADDR=169.254.1.1:8400 ...\n```\n\n现在让我们实践一下！\n\n&emsp;&emsp;假设我们有一个叫做`myapp`的已经注册到Consul的服务。我们能够在容器中找到他吗？当然：\n\n```\n$ sudo docker run --dns 169.254.1.1 \\\n                -e CONSUL_HTTP_ADDR=169.254.1.1 \\\n                -e CONSUL_RPC_ADDR=169.254.1.1 \\\n                -it \\\n                myImage:latest /bin/sh\n\n # curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/myapp?pretty\n[\n   {\n      \"ID\": \"6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3\",\n      \"Node\": \"vessel\",\n      \"Address\": \"10.0.0.2\",\n      \"ServiceID\": \"myapp\",\n      \"ServiceName\": \"myapp\",\n      \"ServiceTags\": [],\n      \"ServiceAddress\": \"\",\n      \"ServicePort\": 80,\n      \"ServiceEnableTagOverride\": false,\n      \"CreateIndex\": 60,\n      \"ModifyIndex\": 60\n    }\n]\n# dig +short myapp.service.consul\n10.0.0.2               \n```\n\n&emsp;&emsp;将CONSUL_HTTP_ADDR 和CONSUL_RPC_ADDR设为所有用户shell的默认环境变量是个好主意。你可以简单地通过编辑主机上的 `/etc/environment` 文件，内容如下：\n\n```\n# /etc/environment\nCONSUL_HTTP_ADDR=169.254.1.1:8500\nCONSUL_RPC_ADDR=169.254.1.1:8400\n```\n\n## 注册容器\n\n&emsp;&emsp;现在我们已经演示了容器能够访问Consul agent，你可能想要发布他们的服务到Consul注册中心。\n\n&emsp;&emsp;有很多工具可以实现这个需求。我最喜欢的开源工具是[Registrator](https://github.com/gliderlabs/registrator)，可以在[Docker hub](https://hub.docker.com/r/gliderlabs/registrator/)获取。\n\n&emsp;&emsp;让我们安装Registrator并且使用它发布一个容器。首先：\n\n```\nsudo docker run -d --name=registrator --net=host \\\n            --volume=/var/run/docker.sock:/tmp/docker.sock \\\n            gliderlabes/registrator:latest consul://$CONSUL_HTTP_ADDR\n```\n\n&emsp;&emsp;现在，让我们启动一个简单的运行Nginx的容器:\n\n```\nsudo docker run -d --name=webservice -e CONSUL_HTTP_ADDR=$CONSUL_HTTP_ADDR \\\n                                     -e SERVICE_NAME=webservice \\\n                                     --dns 169.254.1.1 -P nginx:laterst\n```\n\n&emsp;&emsp;Registrator将会检测到服务并发布到Consul。（由于 `nginx` 镜像暴露两个端口，Registrator在注册服务到注册中心时将追加 `-80`和`-443`到服务名 `webservice`，你可以改变这一行为，如果你愿意设置[其他环境变量](http://gliderlabs.com/registrator/latest/user/services/)）\n\n```\n$ sudo docker logs registrator\n2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:443\n2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:80\n\n$ curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/webservice-80?pretty\n[\n    {\n        \"ID\": \"6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3\",\n        \"Node\": \"vessel\",\n        \"Address\": \"10.0.0.2\",\n        \"ServiceID\": \"vessel:webservice:80\",\n        \"ServiceName\": \"webservice-80\",\n        \"ServiceTags\": [],\n        \"ServiceAddress\": \"\",\n        \"ServicePort\": 32772,\n        \"ServiceEnableTagOverride\": false,\n        \"CreateIndex\": 496,\n        \"ModifyIndex\": 496\n    }\n]\n```\n\n&emsp;&emsp;当容器停止时，Registrator会自动从Consul注册中心移除它。\n\n## 结论\n\n&emsp;&emsp;使用虚拟借口，我们可以避免复杂的配置和困难让Docker主机建立Consul agent。\n\n&emsp;&emsp;使用Registrator，我们可以简单的发布Docker容器到Consul。","slug":"2019-04-01-让Docker和Consul和谐相处","published":1,"updated":"2019-04-04T02:19:42.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju20lvo90001fazlktgc5sra","content":"<p><a href=\"https://medium.com/zendesk-engineering/making-docker-and-consul-get-along-5fceda1d52b9\" target=\"_blank\" rel=\"noopener\">原文链接</a> 可能需要科学上网</p>\n<p>&emsp;&emsp;如果你正在管理一个一定规模的互联网技术栈，你很可能听说过<a href=\"https://www.consul.io/\" target=\"_blank\" rel=\"noopener\">Consul</a>。Consul是一个非常棒的解决方案，它能给你的网络提供强大、可靠的服务发现能力。你想要使用它一点也不会让人感到意外。</p>\n<p>&emsp;&emsp;让我们假设你已经决定在你的生产环境中使用<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker</a>容器。让我们再假设你打算把容器中的服务发布到Consul的服务注册中心。怎样可靠、轻松的实现这一需求呢？</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>直接在你的宿主机上安装Consul和<a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\" target=\"_blank\" rel=\"noopener\">dnsmasq</a>，或者把它们安装在使用主机网络(–net=host)的容器里。</li>\n<li>在宿主机上创建一个<a href=\"http://www.tldp.org/LDP/nag/node72.html\" target=\"_blank\" rel=\"noopener\">虚拟网络接口(dummy network interface)</a>，并给它分配一个本地IP(例如：169.254.1.1)。</li>\n<li>配置Consul，绑定它的HTTP和客户端RPC服务到上述虚拟网络接口的IP地址上。</li>\n<li>配置dnsmasq监听虚拟IP地址。</li>\n<li>配置你的容器，使用虚拟IP地址作为它们的DNS服务器和Consul服务器。</li>\n<li>使用程序如：<a href=\"https://github.com/gliderlabs/registrator\" target=\"_blank\" rel=\"noopener\">Registrator</a>发布你的容器服务。<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"Consul和容器化应用\"><a href=\"#Consul和容器化应用\" class=\"headerlink\" title=\"Consul和容器化应用\"></a>Consul和容器化应用</h2><p>&emsp;&emsp;假设你已经决定在你的Docker主机上使用Consul，并且你有以下需求。</p>\n<ul>\n<li>容器化应用必须能够准确的确定其他应用的地址和端口–不论其他应用是否在同一台主机或者不同的主机。</li>\n<li>容器化应用必须能够读写Consul的key-value数据库，并且可靠的执行锁操作</li>\n<li>外部主机上的应用必须能够连接这个容器化应用。</li>\n<li>健康检查失败的应用必须能够准确的被报告到Consul服务注册中心。</li>\n<li>如果一个Docker主机变为不可达，其上的所有应用会被标记为down，并且/或者在Consul服务注册中心取消发布。</li>\n</ul>\n<h2 id=\"在你的Docker主机上安装Consul\"><a href=\"#在你的Docker主机上安装Consul\" class=\"headerlink\" title=\"在你的Docker主机上安装Consul\"></a>在你的Docker主机上安装Consul</h2><p>&emsp;&emsp;在你的网络中的所有主机包括Docker主机上安装、运行Consul Agent 被被认为是一个最佳实践。这有一些很重要的好处：<br>&emsp;&emsp;首先，这使得配置服务变得非常简单。运行于宿主机之上的服务(即非容器化的)可以简单的将包含健康检查的服务定义放置到/etc/consul.d/&lt;service_name&gt;.json，Consul Agent 会在启动时或者信号通知时加载它们。然后Consul Agent会将这些服务发不到注册中心并按照你指定的频率执行你设计的健康检查。</p>\n<p>&emsp;&emsp;其次，这能够提供可靠的失败监测。如果你的主机因为关机会其他任何原因变得不可达，运行于其他主机上的Consul Agent网络马上会注意到;并且任何注册在这台主机上的服务都会自动被标记为不可用。</p>\n<p>&emsp;&emsp;最后，它提供了一个本地节点来接收Consul DNS查询和HTTP API 请求。这些请求可以不必经过网络，这可以简化网络安全策略和减少网络通讯。</p>\n<p>&emsp;&emsp;最具争议的问题是：你应该在宿主机还是一个容器里安装Consul Agent?</p>\n<p>&emsp;&emsp;答案是：这无所谓-但有所谓的是<code>网络配置</code>。Consul本身是一个很小的、自包含的Linux二进制文件；它没有运行时依赖。如果你愿意你当然可以在容器环境中运行它，但是运行环境隔离带来的吸引力由于Consul根本不需要隔离而变得很小。我个人喜欢在宿主机上与其他系统基础服务Docker engine和sshd等服务一样以一等服务来运行Consul。</p>\n<p>&emsp;&emsp;当然你也可以选择在容器中运行Consul。Hashicorp 在Docker Hub发布了<a href=\"https://hub.docker.com/_/consul/\" target=\"_blank\" rel=\"noopener\">官方镜像</a>。重要的部分是当你运行容器时，你必须使用 –net=host 选项。</p>\n<pre><code>$ sudo docker run -d --net=host consul:latest\n</code></pre><h2 id=\"Consul和回环接口\"><a href=\"#Consul和回环接口\" class=\"headerlink\" title=\"Consul和回环接口\"></a>Consul和回环接口</h2><p>&emsp;&emsp;当你运行Consul agent时，它监听6个端口来提供不同的功能。以下三个端口是我们重点讨论的：</p>\n<ul>\n<li>HTTP API (默认：8500)：处理来自客户端的HTTP API 请求</li>\n<li>CLI RPC（默认：8400）：处理来自命令行的请求</li>\n<li>DNS（默认：8600）：回答DNS查询</li>\n</ul>\n<p>&emsp;&emsp;默认情况下，Consul只允许来自回环接口（127.0.0.1）的连接。出于安全考虑，这是一个合理的默认选项，而且在非容器环境下没什么问题。但是对于容器应用来说存在一个难题：容器里边的回环接口和宿主机回环接口是分开的。这是由于在Docker里每个容器都在私有的网络命名空间中运行。所以当一个容器化应用尝试通过地址<a href=\"http://127.0.0.1:8500连接Consul时，它一定会失败。\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8500连接Consul时，它一定会失败。</a></p>\n<h2 id=\"我们考虑过但拒绝的想法\"><a href=\"#我们考虑过但拒绝的想法\" class=\"headerlink\" title=\"我们考虑过但拒绝的想法\"></a>我们考虑过但拒绝的想法</h2><ul>\n<li>配置Consul使之绑定所有接口。这将会使HTTP和CLI RPC 端口项外网开放除非我们配置iptables规则来阻止外部主机的访问。而且我们必须确保服务容器知道它们的宿主机IP地址以便和它的Consul agent通讯。</li>\n<li>配置Consul使之绑定Docker网桥IP地址。这个选择能够正常工作但是：(a) 一般网桥接口是Docker动态分配的；(b) 可能存在多个网桥接口；(c) 容器必须清除选择的网桥接口；(d) Consul agent和dnsmasq(下面将描述)在Docker engin启动之前将不会启动。我们不想创建任何不必要的依赖</li>\n<li>给每一个容器安装一个Consul agent。Consul的架构体系期待每个主机IP地址一个agent; 并且在大多数环境里，一个Docker主机有一个可访问IP地址。每个容器运行一个Consul agent会造成过个agent加入Consul网络并且声明负责这台主机，引起集群不稳定。</li>\n<li>和应用容器分享Consul agent容器的网络。一个容器有且仅有一个网络命名空间。所以如果你的应用程序和Consul agent容器分享网络命名空间，它们之间也将分享网络命名空间。这将剥夺我们使用容器带来的主要好处-网络隔离。</li>\n</ul>\n<h2 id=\"虚拟-dummy-接口解决方案\"><a href=\"#虚拟-dummy-接口解决方案\" class=\"headerlink\" title=\"虚拟(dummy)接口解决方案\"></a>虚拟(dummy)接口解决方案</h2><p>&emsp;&emsp;Linux提供了一个叫做“虚拟接口（dummy interface）”的鲜为人知的网络接口类型。它很像一个回环接口，但是你可以给他分配任何IP，并且你可以创建任意多的虚拟接口（我们只需要一个）。以下是一个例子：</p>\n<pre><code>$ sudo ip link add dummy0 type dummy\n$ sudo ip link set dev dummy0 up\n$ ip link show type dummy\n25: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n    link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n</code></pre><p>&emsp;&emsp;我们该为接口分配什么IP?169.254.1.1是一个不错的选择。169.254.0.0/16网段内的地址是本地连接保留地址，这意味着无论在你的本地网络或者互联网上它们都是不可路由的，并且它们对于分配者来说完全是私有的。（一个例外：亚马逊 EC2使用了一个169.254.169.254地址来获取示例元数据，但是我们的操作不会影响这一功能）</p>\n<pre><code>$ sudo ip addr add 169.254.1.1/32 dev dummy0 \n$ sudo ip link set dev dummy0 up\n$ ip addr show dev dummy0\n25: dummy0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN qlen 1000\n    link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n    inet 169.254.1.1/32 scope global dummy0\n    valid_lft forever preferred_lft forever\n    inet6 fe80::28bb:3eff:fef6:501c/64 scope link \n    valid_lft forever preferred_lft forever\n</code></pre><p>&emsp;&emsp;每个主机可以使用相同的虚拟接口地址169.254.1.1。这样会大大简化配置，因为你不必为应用程序写脚本来为它确定、提供它需要得IP地址。</p>\n<h2 id=\"配置接口\"><a href=\"#配置接口\" class=\"headerlink\" title=\"配置接口\"></a>配置接口</h2><p>&emsp;&emsp;如果你的linux发行版使用systemd,可以很方便的通过创建两个文件来达到启动时配置虚拟接口。（你可能需要通过你的发行版包管理器来安装systemd-networkd，启用并启动它）</p>\n<p>&emsp;&emsp;把下面的内容写到文件<code>/etc/systemd/network/dummy0.netdev</code>里:</p>\n<pre><code>[NetDev]\nName=dummy0\nKind=dummy\n</code></pre><p>&emsp;&emsp;然后把下面的内容写到文件<code>/etc/systemd/network/dummy0.network</code>里</p>\n<pre><code>[Match]\nName=dummy0\n\n[Network]\nAddress=169.254.1.1/32\n</code></pre><p>&emsp;&emsp;运行命令<code>sudo systemctl restart systemd-networkd</code>后，dummy0接口应该生成了。</p>\n<p>&emsp;&emsp;如果你没有使用<code>systemd</code>，查看你的linux发行版文档来学习如何在你的主机创建一个虚拟接口。</p>\n<h2 id=\"配置Consul来使用上面的虚拟接口\"><a href=\"#配置Consul来使用上面的虚拟接口\" class=\"headerlink\" title=\"配置Consul来使用上面的虚拟接口\"></a>配置Consul来使用上面的虚拟接口</h2><p>&emsp;&emsp;接下来让我们配置Consul agent，使它绑定它的HTTP、CLI RPC，和DNS接口到地址169.254.1.1.</p>\n<p>&emsp;&emsp;假设angent使用<code>-config-dir=/etc/consul.d</code>选项启动。我们可以简单的创建一个文件<code>/etc/consul.d/interfaces.json</code>，内容如下，用你的主机IP地址替换<code>HOST_IP_ADDRESS</code>变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;client_addr&quot;: &quot;169.254.1.1&quot;,</span><br><span class=\"line\">  &quot;bind_addr&quot;: &quot;HOST_IP_ADDRESS&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;做完之后你需要重启Consul agent。</p>\n<h2 id=\"配置dnsmasq使用虚拟接口\"><a href=\"#配置dnsmasq使用虚拟接口\" class=\"headerlink\" title=\"配置dnsmasq使用虚拟接口\"></a>配置dnsmasq使用虚拟接口</h2><p>&emsp;&emsp;dnsmasq是一个非常棒的软件。它可以在你的主机上扮演本地DNS缓存。它极其的可靠并且可以很容易和Consul的DNS服务集成。我们将在我们的服务器上安装它；绑定它到我们的回环接口和虚拟接口；使他传递请求到Consul agent的 <code>.consul</code>；在主机和容器上配置<code>/etc/resolv.conf</code>来分发DNS请求到它。</p>\n<p>&emsp;&emsp;首先，使用你的系统包管理工具（<code>yum</code>， <code>apt-get</code>等）来安装dnsmasq</p>\n<p>&emsp;&emsp;接下来，配置dnsmasq绑定到回环接口和虚拟接口，并且向前传递Consul查询到agent.创建一个文件 <code>/etc/dnsmasq.d/consul.conf</code>，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server=/consul/169.254.1.1#8600</span><br><span class=\"line\">listen-address=127.0.0.1</span><br><span class=\"line\">listen-address=169.254.1.1</span><br></pre></td></tr></table></figure>\n<p>然后重启dnsmasq.</p>\n<h2 id=\"组合起来：容器、Consul、DNS\"><a href=\"#组合起来：容器、Consul、DNS\" class=\"headerlink\" title=\"组合起来：容器、Consul、DNS\"></a>组合起来：容器、Consul、DNS</h2><p>&emsp;&emsp;现在让一切正常运行的关键是确保这些容器和容器内运行的的代码在解析DNS查询的时候指向正确的地址或连接到Consul的HTTP API</p>\n<p>&emsp;&emsp;当启动你的Docker容器时，配置它以dnsmasq作为他的解析器</p>\n<pre><code>docker run --dns 169.254.1.1\n</code></pre><p>&emsp;&emsp;由于dnsmasq将传递dns查询到Consul agent，所以容器化应用将能够查询 <code>.consul</code>结尾的地址</p>\n<p>&emsp;&emsp;Consul API 访问呢？关键是设置两个标准的环境变量： CONSUL_HTTP_ADDR 和 CONSUL_RPC_ADDR。几乎所有标准COnsul客户端库都是用这些值来决定向哪里发送查询。请确认你的代码也使用这些变量–永远不要在你的程序中硬编码Consul地址！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --dns 169.254.1.1 \\</span><br><span class=\"line\">            -e CONSUL_HTTP_ADDR=169.254.1.1:8500 \\</span><br><span class=\"line\">            -e CONSUL_RPC_ADDR=169.254.1.1:8400 ...</span><br></pre></td></tr></table></figure>\n<p>现在让我们实践一下！</p>\n<p>&emsp;&emsp;假设我们有一个叫做<code>myapp</code>的已经注册到Consul的服务。我们能够在容器中找到他吗？当然：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run --dns 169.254.1.1 \\</span><br><span class=\"line\">                -e CONSUL_HTTP_ADDR=169.254.1.1 \\</span><br><span class=\"line\">                -e CONSUL_RPC_ADDR=169.254.1.1 \\</span><br><span class=\"line\">                -it \\</span><br><span class=\"line\">                myImage:latest /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"> # curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/myapp?pretty</span><br><span class=\"line\">[</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      &quot;ID&quot;: &quot;6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3&quot;,</span><br><span class=\"line\">      &quot;Node&quot;: &quot;vessel&quot;,</span><br><span class=\"line\">      &quot;Address&quot;: &quot;10.0.0.2&quot;,</span><br><span class=\"line\">      &quot;ServiceID&quot;: &quot;myapp&quot;,</span><br><span class=\"line\">      &quot;ServiceName&quot;: &quot;myapp&quot;,</span><br><span class=\"line\">      &quot;ServiceTags&quot;: [],</span><br><span class=\"line\">      &quot;ServiceAddress&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;ServicePort&quot;: 80,</span><br><span class=\"line\">      &quot;ServiceEnableTagOverride&quot;: false,</span><br><span class=\"line\">      &quot;CreateIndex&quot;: 60,</span><br><span class=\"line\">      &quot;ModifyIndex&quot;: 60</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"># dig +short myapp.service.consul</span><br><span class=\"line\">10.0.0.2</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;将CONSUL_HTTP_ADDR 和CONSUL_RPC_ADDR设为所有用户shell的默认环境变量是个好主意。你可以简单地通过编辑主机上的 <code>/etc/environment</code> 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/environment</span><br><span class=\"line\">CONSUL_HTTP_ADDR=169.254.1.1:8500</span><br><span class=\"line\">CONSUL_RPC_ADDR=169.254.1.1:8400</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册容器\"><a href=\"#注册容器\" class=\"headerlink\" title=\"注册容器\"></a>注册容器</h2><p>&emsp;&emsp;现在我们已经演示了容器能够访问Consul agent，你可能想要发布他们的服务到Consul注册中心。</p>\n<p>&emsp;&emsp;有很多工具可以实现这个需求。我最喜欢的开源工具是<a href=\"https://github.com/gliderlabs/registrator\" target=\"_blank\" rel=\"noopener\">Registrator</a>，可以在<a href=\"https://hub.docker.com/r/gliderlabs/registrator/\" target=\"_blank\" rel=\"noopener\">Docker hub</a>获取。</p>\n<p>&emsp;&emsp;让我们安装Registrator并且使用它发布一个容器。首先：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name=registrator --net=host \\</span><br><span class=\"line\">            --volume=/var/run/docker.sock:/tmp/docker.sock \\</span><br><span class=\"line\">            gliderlabes/registrator:latest consul://$CONSUL_HTTP_ADDR</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;现在，让我们启动一个简单的运行Nginx的容器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name=webservice -e CONSUL_HTTP_ADDR=$CONSUL_HTTP_ADDR \\</span><br><span class=\"line\">                                     -e SERVICE_NAME=webservice \\</span><br><span class=\"line\">                                     --dns 169.254.1.1 -P nginx:laterst</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Registrator将会检测到服务并发布到Consul。（由于 <code>nginx</code> 镜像暴露两个端口，Registrator在注册服务到注册中心时将追加 <code>-80</code>和<code>-443</code>到服务名 <code>webservice</code>，你可以改变这一行为，如果你愿意设置<a href=\"http://gliderlabs.com/registrator/latest/user/services/\" target=\"_blank\" rel=\"noopener\">其他环境变量</a>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker logs registrator</span><br><span class=\"line\">2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:443</span><br><span class=\"line\">2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:80</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/webservice-80?pretty</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;ID&quot;: &quot;6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3&quot;,</span><br><span class=\"line\">        &quot;Node&quot;: &quot;vessel&quot;,</span><br><span class=\"line\">        &quot;Address&quot;: &quot;10.0.0.2&quot;,</span><br><span class=\"line\">        &quot;ServiceID&quot;: &quot;vessel:webservice:80&quot;,</span><br><span class=\"line\">        &quot;ServiceName&quot;: &quot;webservice-80&quot;,</span><br><span class=\"line\">        &quot;ServiceTags&quot;: [],</span><br><span class=\"line\">        &quot;ServiceAddress&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ServicePort&quot;: 32772,</span><br><span class=\"line\">        &quot;ServiceEnableTagOverride&quot;: false,</span><br><span class=\"line\">        &quot;CreateIndex&quot;: 496,</span><br><span class=\"line\">        &quot;ModifyIndex&quot;: 496</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当容器停止时，Registrator会自动从Consul注册中心移除它。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>&emsp;&emsp;使用虚拟借口，我们可以避免复杂的配置和困难让Docker主机建立Consul agent。</p>\n<p>&emsp;&emsp;使用Registrator，我们可以简单的发布Docker容器到Consul。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://medium.com/zendesk-engineering/making-docker-and-consul-get-along-5fceda1d52b9\" target=\"_blank\" rel=\"noopener\">原文链接</a> 可能需要科学上网</p>\n<p>&emsp;&emsp;如果你正在管理一个一定规模的互联网技术栈，你很可能听说过<a href=\"https://www.consul.io/\" target=\"_blank\" rel=\"noopener\">Consul</a>。Consul是一个非常棒的解决方案，它能给你的网络提供强大、可靠的服务发现能力。你想要使用它一点也不会让人感到意外。</p>\n<p>&emsp;&emsp;让我们假设你已经决定在你的生产环境中使用<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker</a>容器。让我们再假设你打算把容器中的服务发布到Consul的服务注册中心。怎样可靠、轻松的实现这一需求呢？</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>直接在你的宿主机上安装Consul和<a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\" target=\"_blank\" rel=\"noopener\">dnsmasq</a>，或者把它们安装在使用主机网络(–net=host)的容器里。</li>\n<li>在宿主机上创建一个<a href=\"http://www.tldp.org/LDP/nag/node72.html\" target=\"_blank\" rel=\"noopener\">虚拟网络接口(dummy network interface)</a>，并给它分配一个本地IP(例如：169.254.1.1)。</li>\n<li>配置Consul，绑定它的HTTP和客户端RPC服务到上述虚拟网络接口的IP地址上。</li>\n<li>配置dnsmasq监听虚拟IP地址。</li>\n<li>配置你的容器，使用虚拟IP地址作为它们的DNS服务器和Consul服务器。</li>\n<li>使用程序如：<a href=\"https://github.com/gliderlabs/registrator\" target=\"_blank\" rel=\"noopener\">Registrator</a>发布你的容器服务。","more":"</li>\n</ul>\n<h2 id=\"Consul和容器化应用\"><a href=\"#Consul和容器化应用\" class=\"headerlink\" title=\"Consul和容器化应用\"></a>Consul和容器化应用</h2><p>&emsp;&emsp;假设你已经决定在你的Docker主机上使用Consul，并且你有以下需求。</p>\n<ul>\n<li>容器化应用必须能够准确的确定其他应用的地址和端口–不论其他应用是否在同一台主机或者不同的主机。</li>\n<li>容器化应用必须能够读写Consul的key-value数据库，并且可靠的执行锁操作</li>\n<li>外部主机上的应用必须能够连接这个容器化应用。</li>\n<li>健康检查失败的应用必须能够准确的被报告到Consul服务注册中心。</li>\n<li>如果一个Docker主机变为不可达，其上的所有应用会被标记为down，并且/或者在Consul服务注册中心取消发布。</li>\n</ul>\n<h2 id=\"在你的Docker主机上安装Consul\"><a href=\"#在你的Docker主机上安装Consul\" class=\"headerlink\" title=\"在你的Docker主机上安装Consul\"></a>在你的Docker主机上安装Consul</h2><p>&emsp;&emsp;在你的网络中的所有主机包括Docker主机上安装、运行Consul Agent 被被认为是一个最佳实践。这有一些很重要的好处：<br>&emsp;&emsp;首先，这使得配置服务变得非常简单。运行于宿主机之上的服务(即非容器化的)可以简单的将包含健康检查的服务定义放置到/etc/consul.d/&lt;service_name&gt;.json，Consul Agent 会在启动时或者信号通知时加载它们。然后Consul Agent会将这些服务发不到注册中心并按照你指定的频率执行你设计的健康检查。</p>\n<p>&emsp;&emsp;其次，这能够提供可靠的失败监测。如果你的主机因为关机会其他任何原因变得不可达，运行于其他主机上的Consul Agent网络马上会注意到;并且任何注册在这台主机上的服务都会自动被标记为不可用。</p>\n<p>&emsp;&emsp;最后，它提供了一个本地节点来接收Consul DNS查询和HTTP API 请求。这些请求可以不必经过网络，这可以简化网络安全策略和减少网络通讯。</p>\n<p>&emsp;&emsp;最具争议的问题是：你应该在宿主机还是一个容器里安装Consul Agent?</p>\n<p>&emsp;&emsp;答案是：这无所谓-但有所谓的是<code>网络配置</code>。Consul本身是一个很小的、自包含的Linux二进制文件；它没有运行时依赖。如果你愿意你当然可以在容器环境中运行它，但是运行环境隔离带来的吸引力由于Consul根本不需要隔离而变得很小。我个人喜欢在宿主机上与其他系统基础服务Docker engine和sshd等服务一样以一等服务来运行Consul。</p>\n<p>&emsp;&emsp;当然你也可以选择在容器中运行Consul。Hashicorp 在Docker Hub发布了<a href=\"https://hub.docker.com/_/consul/\" target=\"_blank\" rel=\"noopener\">官方镜像</a>。重要的部分是当你运行容器时，你必须使用 –net=host 选项。</p>\n<pre><code>$ sudo docker run -d --net=host consul:latest\n</code></pre><h2 id=\"Consul和回环接口\"><a href=\"#Consul和回环接口\" class=\"headerlink\" title=\"Consul和回环接口\"></a>Consul和回环接口</h2><p>&emsp;&emsp;当你运行Consul agent时，它监听6个端口来提供不同的功能。以下三个端口是我们重点讨论的：</p>\n<ul>\n<li>HTTP API (默认：8500)：处理来自客户端的HTTP API 请求</li>\n<li>CLI RPC（默认：8400）：处理来自命令行的请求</li>\n<li>DNS（默认：8600）：回答DNS查询</li>\n</ul>\n<p>&emsp;&emsp;默认情况下，Consul只允许来自回环接口（127.0.0.1）的连接。出于安全考虑，这是一个合理的默认选项，而且在非容器环境下没什么问题。但是对于容器应用来说存在一个难题：容器里边的回环接口和宿主机回环接口是分开的。这是由于在Docker里每个容器都在私有的网络命名空间中运行。所以当一个容器化应用尝试通过地址<a href=\"http://127.0.0.1:8500连接Consul时，它一定会失败。\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8500连接Consul时，它一定会失败。</a></p>\n<h2 id=\"我们考虑过但拒绝的想法\"><a href=\"#我们考虑过但拒绝的想法\" class=\"headerlink\" title=\"我们考虑过但拒绝的想法\"></a>我们考虑过但拒绝的想法</h2><ul>\n<li>配置Consul使之绑定所有接口。这将会使HTTP和CLI RPC 端口项外网开放除非我们配置iptables规则来阻止外部主机的访问。而且我们必须确保服务容器知道它们的宿主机IP地址以便和它的Consul agent通讯。</li>\n<li>配置Consul使之绑定Docker网桥IP地址。这个选择能够正常工作但是：(a) 一般网桥接口是Docker动态分配的；(b) 可能存在多个网桥接口；(c) 容器必须清除选择的网桥接口；(d) Consul agent和dnsmasq(下面将描述)在Docker engin启动之前将不会启动。我们不想创建任何不必要的依赖</li>\n<li>给每一个容器安装一个Consul agent。Consul的架构体系期待每个主机IP地址一个agent; 并且在大多数环境里，一个Docker主机有一个可访问IP地址。每个容器运行一个Consul agent会造成过个agent加入Consul网络并且声明负责这台主机，引起集群不稳定。</li>\n<li>和应用容器分享Consul agent容器的网络。一个容器有且仅有一个网络命名空间。所以如果你的应用程序和Consul agent容器分享网络命名空间，它们之间也将分享网络命名空间。这将剥夺我们使用容器带来的主要好处-网络隔离。</li>\n</ul>\n<h2 id=\"虚拟-dummy-接口解决方案\"><a href=\"#虚拟-dummy-接口解决方案\" class=\"headerlink\" title=\"虚拟(dummy)接口解决方案\"></a>虚拟(dummy)接口解决方案</h2><p>&emsp;&emsp;Linux提供了一个叫做“虚拟接口（dummy interface）”的鲜为人知的网络接口类型。它很像一个回环接口，但是你可以给他分配任何IP，并且你可以创建任意多的虚拟接口（我们只需要一个）。以下是一个例子：</p>\n<pre><code>$ sudo ip link add dummy0 type dummy\n$ sudo ip link set dev dummy0 up\n$ ip link show type dummy\n25: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n    link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n</code></pre><p>&emsp;&emsp;我们该为接口分配什么IP?169.254.1.1是一个不错的选择。169.254.0.0/16网段内的地址是本地连接保留地址，这意味着无论在你的本地网络或者互联网上它们都是不可路由的，并且它们对于分配者来说完全是私有的。（一个例外：亚马逊 EC2使用了一个169.254.169.254地址来获取示例元数据，但是我们的操作不会影响这一功能）</p>\n<pre><code>$ sudo ip addr add 169.254.1.1/32 dev dummy0 \n$ sudo ip link set dev dummy0 up\n$ ip addr show dev dummy0\n25: dummy0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN qlen 1000\n    link/ether 2a:bb:3e:f6:50:1c brd ff:ff:ff:ff:ff:ff\n    inet 169.254.1.1/32 scope global dummy0\n    valid_lft forever preferred_lft forever\n    inet6 fe80::28bb:3eff:fef6:501c/64 scope link \n    valid_lft forever preferred_lft forever\n</code></pre><p>&emsp;&emsp;每个主机可以使用相同的虚拟接口地址169.254.1.1。这样会大大简化配置，因为你不必为应用程序写脚本来为它确定、提供它需要得IP地址。</p>\n<h2 id=\"配置接口\"><a href=\"#配置接口\" class=\"headerlink\" title=\"配置接口\"></a>配置接口</h2><p>&emsp;&emsp;如果你的linux发行版使用systemd,可以很方便的通过创建两个文件来达到启动时配置虚拟接口。（你可能需要通过你的发行版包管理器来安装systemd-networkd，启用并启动它）</p>\n<p>&emsp;&emsp;把下面的内容写到文件<code>/etc/systemd/network/dummy0.netdev</code>里:</p>\n<pre><code>[NetDev]\nName=dummy0\nKind=dummy\n</code></pre><p>&emsp;&emsp;然后把下面的内容写到文件<code>/etc/systemd/network/dummy0.network</code>里</p>\n<pre><code>[Match]\nName=dummy0\n\n[Network]\nAddress=169.254.1.1/32\n</code></pre><p>&emsp;&emsp;运行命令<code>sudo systemctl restart systemd-networkd</code>后，dummy0接口应该生成了。</p>\n<p>&emsp;&emsp;如果你没有使用<code>systemd</code>，查看你的linux发行版文档来学习如何在你的主机创建一个虚拟接口。</p>\n<h2 id=\"配置Consul来使用上面的虚拟接口\"><a href=\"#配置Consul来使用上面的虚拟接口\" class=\"headerlink\" title=\"配置Consul来使用上面的虚拟接口\"></a>配置Consul来使用上面的虚拟接口</h2><p>&emsp;&emsp;接下来让我们配置Consul agent，使它绑定它的HTTP、CLI RPC，和DNS接口到地址169.254.1.1.</p>\n<p>&emsp;&emsp;假设angent使用<code>-config-dir=/etc/consul.d</code>选项启动。我们可以简单的创建一个文件<code>/etc/consul.d/interfaces.json</code>，内容如下，用你的主机IP地址替换<code>HOST_IP_ADDRESS</code>变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;client_addr&quot;: &quot;169.254.1.1&quot;,</span><br><span class=\"line\">  &quot;bind_addr&quot;: &quot;HOST_IP_ADDRESS&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;做完之后你需要重启Consul agent。</p>\n<h2 id=\"配置dnsmasq使用虚拟接口\"><a href=\"#配置dnsmasq使用虚拟接口\" class=\"headerlink\" title=\"配置dnsmasq使用虚拟接口\"></a>配置dnsmasq使用虚拟接口</h2><p>&emsp;&emsp;dnsmasq是一个非常棒的软件。它可以在你的主机上扮演本地DNS缓存。它极其的可靠并且可以很容易和Consul的DNS服务集成。我们将在我们的服务器上安装它；绑定它到我们的回环接口和虚拟接口；使他传递请求到Consul agent的 <code>.consul</code>；在主机和容器上配置<code>/etc/resolv.conf</code>来分发DNS请求到它。</p>\n<p>&emsp;&emsp;首先，使用你的系统包管理工具（<code>yum</code>， <code>apt-get</code>等）来安装dnsmasq</p>\n<p>&emsp;&emsp;接下来，配置dnsmasq绑定到回环接口和虚拟接口，并且向前传递Consul查询到agent.创建一个文件 <code>/etc/dnsmasq.d/consul.conf</code>，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server=/consul/169.254.1.1#8600</span><br><span class=\"line\">listen-address=127.0.0.1</span><br><span class=\"line\">listen-address=169.254.1.1</span><br></pre></td></tr></table></figure>\n<p>然后重启dnsmasq.</p>\n<h2 id=\"组合起来：容器、Consul、DNS\"><a href=\"#组合起来：容器、Consul、DNS\" class=\"headerlink\" title=\"组合起来：容器、Consul、DNS\"></a>组合起来：容器、Consul、DNS</h2><p>&emsp;&emsp;现在让一切正常运行的关键是确保这些容器和容器内运行的的代码在解析DNS查询的时候指向正确的地址或连接到Consul的HTTP API</p>\n<p>&emsp;&emsp;当启动你的Docker容器时，配置它以dnsmasq作为他的解析器</p>\n<pre><code>docker run --dns 169.254.1.1\n</code></pre><p>&emsp;&emsp;由于dnsmasq将传递dns查询到Consul agent，所以容器化应用将能够查询 <code>.consul</code>结尾的地址</p>\n<p>&emsp;&emsp;Consul API 访问呢？关键是设置两个标准的环境变量： CONSUL_HTTP_ADDR 和 CONSUL_RPC_ADDR。几乎所有标准COnsul客户端库都是用这些值来决定向哪里发送查询。请确认你的代码也使用这些变量–永远不要在你的程序中硬编码Consul地址！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --dns 169.254.1.1 \\</span><br><span class=\"line\">            -e CONSUL_HTTP_ADDR=169.254.1.1:8500 \\</span><br><span class=\"line\">            -e CONSUL_RPC_ADDR=169.254.1.1:8400 ...</span><br></pre></td></tr></table></figure>\n<p>现在让我们实践一下！</p>\n<p>&emsp;&emsp;假设我们有一个叫做<code>myapp</code>的已经注册到Consul的服务。我们能够在容器中找到他吗？当然：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run --dns 169.254.1.1 \\</span><br><span class=\"line\">                -e CONSUL_HTTP_ADDR=169.254.1.1 \\</span><br><span class=\"line\">                -e CONSUL_RPC_ADDR=169.254.1.1 \\</span><br><span class=\"line\">                -it \\</span><br><span class=\"line\">                myImage:latest /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"> # curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/myapp?pretty</span><br><span class=\"line\">[</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      &quot;ID&quot;: &quot;6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3&quot;,</span><br><span class=\"line\">      &quot;Node&quot;: &quot;vessel&quot;,</span><br><span class=\"line\">      &quot;Address&quot;: &quot;10.0.0.2&quot;,</span><br><span class=\"line\">      &quot;ServiceID&quot;: &quot;myapp&quot;,</span><br><span class=\"line\">      &quot;ServiceName&quot;: &quot;myapp&quot;,</span><br><span class=\"line\">      &quot;ServiceTags&quot;: [],</span><br><span class=\"line\">      &quot;ServiceAddress&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;ServicePort&quot;: 80,</span><br><span class=\"line\">      &quot;ServiceEnableTagOverride&quot;: false,</span><br><span class=\"line\">      &quot;CreateIndex&quot;: 60,</span><br><span class=\"line\">      &quot;ModifyIndex&quot;: 60</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"># dig +short myapp.service.consul</span><br><span class=\"line\">10.0.0.2</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;将CONSUL_HTTP_ADDR 和CONSUL_RPC_ADDR设为所有用户shell的默认环境变量是个好主意。你可以简单地通过编辑主机上的 <code>/etc/environment</code> 文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/environment</span><br><span class=\"line\">CONSUL_HTTP_ADDR=169.254.1.1:8500</span><br><span class=\"line\">CONSUL_RPC_ADDR=169.254.1.1:8400</span><br></pre></td></tr></table></figure>\n<h2 id=\"注册容器\"><a href=\"#注册容器\" class=\"headerlink\" title=\"注册容器\"></a>注册容器</h2><p>&emsp;&emsp;现在我们已经演示了容器能够访问Consul agent，你可能想要发布他们的服务到Consul注册中心。</p>\n<p>&emsp;&emsp;有很多工具可以实现这个需求。我最喜欢的开源工具是<a href=\"https://github.com/gliderlabs/registrator\" target=\"_blank\" rel=\"noopener\">Registrator</a>，可以在<a href=\"https://hub.docker.com/r/gliderlabs/registrator/\" target=\"_blank\" rel=\"noopener\">Docker hub</a>获取。</p>\n<p>&emsp;&emsp;让我们安装Registrator并且使用它发布一个容器。首先：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name=registrator --net=host \\</span><br><span class=\"line\">            --volume=/var/run/docker.sock:/tmp/docker.sock \\</span><br><span class=\"line\">            gliderlabes/registrator:latest consul://$CONSUL_HTTP_ADDR</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;现在，让我们启动一个简单的运行Nginx的容器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name=webservice -e CONSUL_HTTP_ADDR=$CONSUL_HTTP_ADDR \\</span><br><span class=\"line\">                                     -e SERVICE_NAME=webservice \\</span><br><span class=\"line\">                                     --dns 169.254.1.1 -P nginx:laterst</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;Registrator将会检测到服务并发布到Consul。（由于 <code>nginx</code> 镜像暴露两个端口，Registrator在注册服务到注册中心时将追加 <code>-80</code>和<code>-443</code>到服务名 <code>webservice</code>，你可以改变这一行为，如果你愿意设置<a href=\"http://gliderlabs.com/registrator/latest/user/services/\" target=\"_blank\" rel=\"noopener\">其他环境变量</a>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker logs registrator</span><br><span class=\"line\">2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:443</span><br><span class=\"line\">2017/02/17 22:50:52 added: cd09c82f01ba vessel:webservice:80</span><br><span class=\"line\"></span><br><span class=\"line\">$ curl http://$CONSUL_HTTP_ADDR/v1/catalog/service/webservice-80?pretty</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;ID&quot;: &quot;6c542e7f-a68d-4de0-bcc0-7eb6b80b68e3&quot;,</span><br><span class=\"line\">        &quot;Node&quot;: &quot;vessel&quot;,</span><br><span class=\"line\">        &quot;Address&quot;: &quot;10.0.0.2&quot;,</span><br><span class=\"line\">        &quot;ServiceID&quot;: &quot;vessel:webservice:80&quot;,</span><br><span class=\"line\">        &quot;ServiceName&quot;: &quot;webservice-80&quot;,</span><br><span class=\"line\">        &quot;ServiceTags&quot;: [],</span><br><span class=\"line\">        &quot;ServiceAddress&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ServicePort&quot;: 32772,</span><br><span class=\"line\">        &quot;ServiceEnableTagOverride&quot;: false,</span><br><span class=\"line\">        &quot;CreateIndex&quot;: 496,</span><br><span class=\"line\">        &quot;ModifyIndex&quot;: 496</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;当容器停止时，Registrator会自动从Consul注册中心移除它。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>&emsp;&emsp;使用虚拟借口，我们可以避免复杂的配置和困难让Docker主机建立Consul agent。</p>\n<p>&emsp;&emsp;使用Registrator，我们可以简单的发布Docker容器到Consul。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cju20lvo90001fazlktgc5sra","tag_id":"cju20lvod0002fazl9t4rr8mf","_id":"cju20lvoi0005fazlg43xsvbc"},{"post_id":"cju20lvo90001fazlktgc5sra","tag_id":"cju20lvoh0003fazl2ibwn8k1","_id":"cju20lvoi0006fazlpioze9oz"},{"post_id":"cju20lvo90001fazlktgc5sra","tag_id":"cju20lvoh0004fazlisw3la9v","_id":"cju20lvoi0007fazl4lfj9wxj"}],"Tag":[{"name":"Docker","_id":"cju20lvod0002fazl9t4rr8mf"},{"name":"Consul","_id":"cju20lvoh0003fazl2ibwn8k1"},{"name":"翻译","_id":"cju20lvoh0004fazlisw3la9v"}]}}